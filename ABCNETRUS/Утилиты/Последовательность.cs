using System;
using System.Collections.Generic;

namespace ABCNETRUS.”тилиты
{
    /// <summary>
    /// ѕредоставл€ет функционал дл€ работы с последовательност€ми.
    /// </summary>
    public static class ѕоследовательность
    {
        /// <summary>
        /// —оздаЄт последовательность на основе функции селектора.
        /// </summary>
        /// <param name="длина"> оличество элементов.</param>
        /// <param name="отображение">‘ункци€ селектор.</param>
        /// <param name="первый»ндекс">Ќачальный индекс.</param>
        /// <returns>ѕоследовательность.</returns>
        public static IEnumerable<T> √енерировать<T>(int длина, Func<int, T> отображение, int первый»ндекс = 0)
        {
            if (длина < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(длина));
            if (отображение == null)
                throw new јргументявл€етс€Nullќшибка(nameof(отображение));

            for (int i = 0; i < длина; i++)
                yield return отображение(i + первый»ндекс);
        }

        /// <summary>
        /// —оздаЄт последовательность случайных чисел типа Integer.
        /// </summary>
        /// <param name="длина"> оличество элементов.</param>
        /// <param name="нижн€€">Ќижн€€ граница диапазона.</param>
        /// <param name="верхн€€">¬ерхн€€ граница диапазона.</param>
        /// <returns>ѕоследовательность.</returns>
        public static IEnumerable<int> —лучайна€(int длина, int нижн€€ = ÷елочисленные√раницы.Ќижн€€, int верхн€€ = ÷елочисленные√раницы.¬ерхн€€)
        {
            if (длина < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(длина));
            if (нижн€€ > верхн€€)
                throw new Ќеверныйјргументќшибка(nameof(нижн€€));

            for (int i = 0; i < длина; i++)
                yield return ќсновное.—лучайное(нижн€€, верхн€€);
        }

        /// <summary>
        /// —оздаЄт последовательность случайных чисел типа Real.
        /// </summary>
        /// <param name="длина"> оличество элементов.</param>
        /// <param name="нижн€€">Ќижн€€ граница диапазона.</param>
        /// <param name="верхн€€">¬ерхн€€ граница диапазона.</param>
        /// <returns>ѕоследовательность.</returns>
        public static IEnumerable<double> —лучайна€(int длина, double нижн€€ = ¬ещественные√раницы.Ќижн€€, double верхн€€ = ¬ещественные√раницы.¬ерхн€€)
        {
            if (длина < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(длина));
            if (нижн€€ > верхн€€)
                throw new Ќеверныйјргументќшибка(nameof(нижн€€));

            for (int i = 0; i < длина; i++)
                yield return ќсновное.—лучайное(нижн€€, верхн€€);
        }

        /// <summary>
        /// —оздаЄт последовательность, заполненную указанным значением.
        /// </summary>
        /// <param name="длина"> оличество элементов.</param>
        /// <param name="значение">«начение.</param>
        /// <returns>ѕоследовательность.</returns>
        public static IEnumerable<T> «аполнить<T>(int длина, T значение)
        {
            if (длина < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(длина));

            for (int i = 0; i < длина; i++)
                yield return значение;
        }
    }
}