using System;

namespace ABCNETRUS.”тилиты
{
    /// <summary>
    /// ѕредоставл€ет функционал дл€ работы с матрицами.
    /// </summary>
    public static class ћатрица
    {
        /// <summary>
        /// —оздаЄт матрицу из указанных значений.
        /// </summary>
        ///  <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="значени€">«начени€.</param>
        /// <returns>ћатрица.</returns>
        public static T[,] Ќова€<T>(int количество—трок, int количество—толбцов, params T[] значени€)
        {
            if (значени€ == null)
                throw new јргументявл€етс€Nullќшибка(nameof(значени€));
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));
            if (количество—трок * количество—толбцов != значени€.Length)
                throw new јргументявл€етс€Nullќшибка(nameof(значени€));

            T[,] source = new T[количество—трок, количество—толбцов];
            int k = 0;
            for (int i = 0; i < количество—трок; i++)
                for (int j = 0; j < количество—толбцов; j++)
                {
                    source[i, j] = значени€[k];
                    k++;
                }

            return source;
        }

        /// <summary>
        /// —оздаЄт матрицу на основе функции селектора.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="отображение">‘ункци€ селектор.</param>
        /// <param name="первый»ндекс—троки">Ќачальный индекс строки.</param>
        /// <param name="первый»ндекс—толбца">Ќачальный индекс столбца.</param>
        /// <returns>ћатрица.</returns>
        public static T[,] √енерировать<T>(int количество—трок, int количество—толбцов, Func<int, int, T> отображение, int первый»ндекс—троки = 0, int первый»ндекс—толбца = 0)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));
            if (отображение == null)
                throw new јргументявл€етс€Nullќшибка(nameof(отображение));
            
            T[,] source = new T[количество—трок, количество—толбцов];
            for (int i = 0; i < source.GetLength(0); i++)
                for (int j = 0; j < source.GetLength(1); j++)
                    source[i, j] = отображение(i + первый»ндекс—троки, j + первый»ндекс—толбца);

            return source;
        }

        /// <summary>
        /// —оздаЄт матрицу случайных чисел типа Integer.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="нижн€€">Ќижн€€ граница диапазона.</param>
        /// <param name="верхн€€">¬ерхн€€ граница диапазона.</param>
        /// <returns>ћатрица.</returns>
        public static int[,] —лучайна€(int количество—трок, int количество—толбцов, int нижн€€ = ÷елочисленные√раницы.Ќижн€€, int верхн€€ = ÷елочисленные√раницы.¬ерхн€€)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));
            if (нижн€€ > верхн€€)
                throw new Ќеверныйјргументќшибка(nameof(нижн€€));

            int[,] source = new int[количество—трок, количество—толбцов];
            for (int i = 0; i < source.GetLength(0); i++)
                for (int j = 0; j < source.GetLength(1); j++)
                    source[i, j] = ќсновное.—лучайное(нижн€€, верхн€€);

            return source;
        }

        /// <summary>
        /// —оздаЄт матрицу случайных чисел типа Real.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="нижн€€">Ќижн€€ граница диапазона.</param>
        /// <param name="верхн€€">¬ерхн€€ граница диапазона.</param>
        /// <returns>ћатрица.</returns>
        public static double[,] —лучайна€(int количество—трок, int количество—толбцов, double нижн€€ = ¬ещественные√раницы.Ќижн€€, double верхн€€ = ¬ещественные√раницы.¬ерхн€€)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));
            if (нижн€€ > верхн€€)
                throw new Ќеверныйјргументќшибка(nameof(нижн€€));

            double[,] source = new double[количество—трок, количество—толбцов];
            for (int i = 0; i < source.GetLength(0); i++)
                for (int j = 0; j < source.GetLength(1); j++)
                    source[i, j] = ќсновное.—лучайное(нижн€€, верхн€€);

            return source;
        }

        /// <summary>
        /// —оздаЄт матрицу, заполненную указанным значением.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="значение">«начение.</param>
        /// <returns>ћассив.</returns>
        public static T[,] «аполнить<T>(int количество—трок, int количество—толбцов, T значение)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));

            T[,] source = new T[количество—трок, количество—толбцов];
            for (int i = 0; i < source.GetLength(0); i++)
                for (int j = 0; j < source.GetLength(1); j++)
                    source[i, j] = значение;

            return source;
        }

        /// <summary>
        /// „итает матрицу значений типа Boolean.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="приглашение">ѕриглашение к вводу.</param>
        /// <returns>ћатрица.</returns>
        public static bool[,] „итатьЋогическую(int количество—трок, int количество—толбцов, string приглашение = ѕуста€—трока.«начение)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));

            bool[,] source = new bool[количество—трок, количество—толбцов];
            int i = 0;
            int j = 0;

            while (i < количество—трок)
            {
                while (j < количество—толбцов)
                    try
                    {
                        source[i, j] = ќсновное.„итатьЋогическое«начение(приглашение is null ? ѕуста€—трока.«начение : string.Format(приглашение, i, j));
                        j++;
                    }
                    catch (Exception)
                    {
                        Console.WriteLine(ќшибка¬вода.«начение);
                    }

                i++;
                j = 0;
            }

            return source;
        }

        /// <summary>
        /// „итает матрицу значений типа Char.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="приглашение">ѕриглашение к вводу.</param>
        /// <returns>ћатрица.</returns>
        public static char[,] „итать—имвол(int количество—трок, int количество—толбцов, string приглашение = ѕуста€—трока.«начение)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));

            char[,] source = new char[количество—трок, количество—толбцов];
            for (int i = 0; i < количество—трок; i++)
                for (int j = 0; j < количество—толбцов; j++)
                    source[i, j] = ќсновное.„итать—имвол(приглашение is null ? ѕуста€—трока.«начение : string.Format(приглашение, i, j));

            return source;
        }

        /// <summary>
        /// „итает матрицу значений типа Real.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="приглашение">ѕриглашение к вводу.</param>
        /// <returns>ћатрица.</returns>
        public static double[,] „итать¬ещественную(int количество—трок, int количество—толбцов, string приглашение = ѕуста€—трока.«начение)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));

            double[,] source = new double[количество—трок, количество—толбцов];
            int i = 0;
            int j = 0;

            while (i < количество—трок)
            {
                while (j < количество—толбцов)
                    try
                    {
                        source[i, j] = ќсновное.„итать¬ещественное„исло(приглашение is null ? ѕуста€—трока.«начение : string.Format(приглашение, i, j));
                        j++;
                    }
                    catch (Exception)
                    {
                        Console.WriteLine(ќшибка¬вода.«начение);
                    }

                i++;
                j = 0;
            }

            return source;
        }

        /// <summary>
        /// „итает матрицу значений типа Integer.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="приглашение">ѕриглашение к вводу.</param>
        /// <returns>ћатрица.</returns>
        public static int[,] „итать÷елочисленную(int количество—трок, int количество—толбцов, string приглашение = ѕуста€—трока.«начение)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));

            int[,] source = new int[количество—трок, количество—толбцов];
            int i = 0;
            int j = 0;

            while (i < количество—трок)
            {
                while (j < количество—толбцов)
                    try
                    {
                        source[i, j] = ќсновное.„итать÷елое„исло(приглашение is null ? ѕуста€—трока.«начение : string.Format(приглашение, i, j));
                        j++;
                    }
                    catch (Exception)
                    {
                        Console.WriteLine(ќшибка¬вода.«начение);
                    }

                i++;
                j = 0;
            }

            return source;
        }

        /// <summary>
        /// „итает матрицу значений типа String.
        /// </summary>
        /// <param name="количество—трок"> оличество строк.</param>
        /// <param name="количество—толбцов"> оличество столбцов.</param>
        /// <param name="приглашение">ѕриглашение к вводу.</param>
        /// <returns>ћатрица.</returns>
        public static string[,] „итать—троковую(int количество—трок, int количество—толбцов, string приглашение = ѕуста€—трока.«начение)
        {
            if (количество—трок < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—трок));
            if (количество—толбцов < 0)
                throw new јргумент¬неƒопустимогоƒиапазонаќшибка(nameof(количество—толбцов));

            string[,] source = new string[количество—трок, количество—толбцов];
            for (int i = 0; i < количество—трок; i++)
                for (int j = 0; j < количество—толбцов; j++)
                    source[i, j] = ќсновное.„итать—троку(приглашение is null ? ѕуста€—трока.«начение : string.Format(приглашение, i, j));

            return source;
        }
    }
}